import Asset


class Vulnerability(Asset):

    # Constructor
    def __init__(self, id: str, name: str):
        self.id = id
        self.name = name
        self.description = ''
        self.cvss_score = ''
        self.attack_vector = ''
        self.attack_complexity = ''
        self.privileges_required = ''
        self.user_interaction_required = ''
        self.scope = ''
        self.confidentiality_impact = ''
        self.integrity_impact = ''
        self.availability_impact = ''
        self.cvss_exploitability_score = ''
        self.cvss_impact_score = ''
        self.date = ''

    # ToString Method
    def __str__(self):
        return 'Vulnerability {self.id}'.format(self=self)

    # Definition of Getters and Setters
    @property
    def id(self) -> str:
        return self._id

    @id.setter
    def id(self, id: str):
        self._id = id

    @property
    def name(self) -> str:
        return self._name

    @name.setter
    def name(self, name: str):
        self._name = name

    @property
    def description(self) -> str:
        return self._description

    @description.setter
    def description(self, description: str):
        self._description = description

    @property
    def cvss_score(self) -> float:
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score: float):
        self._cvss_score = cvss_score

    @property
    def attack_vector(self) -> str:
        return self._attack_vector

    @attack_vector.setter
    def attack_vector(self, attack_vector: str):
        self._attack_vector = attack_vector

    @property
    def attack_complexity(self) -> str:
        return self._attack_complexity

    @attack_complexity.setter
    def attack_complexity(self, attack_complexity: str):
        self._attack_complexity = attack_complexity

    @property
    def privileges_required(self) -> str:
        return self._privileges_required

    @privileges_required.setter
    def privileges_required(self, privileges_required: str):
        self._privileges_required = privileges_required

    @property
    def user_interaction_required(self) -> str:
        return self._user_interaction_required

    @user_interaction_required.setter
    def user_interaction_required(self, user_interaction_required: str):
        self._user_interaction_required = user_interaction_required

    @property
    def scope(self) -> str:
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        self._scope = scope

    @property
    def confidentiality_impact(self) -> str:
        return self._confidentiality_impact

    @confidentiality_impact.setter
    def confidentiality_impact(self, confidentiality_impact: str):
        self._confidentiality_impact = confidentiality_impact

    @property
    def integrity_impact(self) -> str:
        return self._integrity_impact

    @integrity_impact.setter
    def integrity_impact(self, integrity_impact: str):
        self._integrity_impact = integrity_impact

    @property
    def availability_impact(self) -> str:
        return self._availability_impact

    @availability_impact.setter
    def availability_impact(self, availability_impact: str):
        self._availability_impact = availability_impact

    @property
    def cvss_exploitability_score(self) -> float:
        return self._cvss_exploitability_score

    @cvss_exploitability_score.setter
    def cvss_exploitability_score(self, cvss_exploitability_score: float):
        self._cvss_exploitability_score = cvss_exploitability_score

    @property
    def cvss_impact_score(self) -> float:
        return self._cvss_impact_score

    @cvss_impact_score.setter
    def cvss_impact_score(self, cvss_impact_score: float):
        self._cvss_impact_score = cvss_impact_score

    @property
    def date(self) -> str:
        return self._date

    @date.setter
    def date(self, date: str):
        self._date = date






